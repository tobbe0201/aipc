"""
GPU Acceleration f√∂r AI Desktop Controller

Detta modul tillhandah√•ller GPU-accelererad bearbetning f√∂r
bildanalys och maskinl√§rning f√∂r att √∂ka prestandan.
"""

import os
import time
import logging
import numpy as np
from PIL import Image
import threading
from queue import Queue

# Konfigurera loggning
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler("gpu_accelerator.log"),
        logging.StreamHandler()
    ]
)

# F√∂rs√∂k att importera GPU-bibliotek
# Fallback p√• CPU-versioner om inte tillg√§ngliga
try:
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    USE_CUDA = torch.cuda.is_available()
    if USE_CUDA:
        logging.info(f"üéÆ GPU acceleration aktiverad: {torch.cuda.get_device_name(0)}")
    else:
        logging.info("‚ö†Ô∏è GPU acceleration inte tillg√§nglig via PyTorch. Anv√§nder CPU.")
except ImportError:
    USE_CUDA = False
    logging.warning("‚ö†Ô∏è PyTorch √§r inte installerat. GPU-acceleration kommer inte att vara tillg√§nglig.")

# F√∂rs√∂k att importera OpenCV med CUDA-st√∂d
try:
    import cv2
    # Kontrollera om OpenCV har CUDA-st√∂d
    cv2_cuda_available = cv2.cuda.getCudaEnabledDeviceCount() > 0
    if cv2_cuda_available:
        logging.info(f"üéÆ OpenCV CUDA acceleration aktiverad: {cv2.cuda.getCudaEnabledDeviceCount()} enheter")
    else:
        logging.info("‚ö†Ô∏è OpenCV CUDA acceleration inte tillg√§nglig. Anv√§nder CPU.")
except (ImportError, AttributeError):
    cv2_cuda_available = False
    logging.warning("‚ö†Ô∏è OpenCV med CUDA-st√∂d √§r inte tillg√§ngligt.")

class GPUAccelerator:
    """Hantera GPU-accelererade operationer"""
    
    def __init__(self, use_gpu=True, batch_size=4, num_workers=2):
        self.use_gpu = use_gpu and (USE_CUDA or cv2_cuda_available)
        self.batch_size = batch_size
        self.num_workers = num_workers
        
        # Processk√∂er f√∂r parallell bearbetning
        self.image_queue = Queue(maxsize=batch_size * 2)
        self.result_queue = Queue()
        
        # Worker-tr√•dar
        self.workers = []
        self.running = False
        
        if self.use_gpu:
            # F√∂r PyTorch
            if USE_CUDA:
                self.device = torch.device('cuda')
                # Visa tillg√§ngligt GPU-minne
                memory_allocated = torch.cuda.memory_allocated(0) / (1024 ** 2)
                memory_reserved = torch.cuda.memory_reserved(0) / (1024 ** 2)
                logging.info(f"GPU minne: {memory_allocated:.1f}MB allokerat, {memory_reserved:.1f}MB reserverat")
            
            # F√∂r OpenCV CUDA
            if cv2_cuda_available:
                # Initiera CUDA-str√∂mmar f√∂r OpenCV
                self.cv2_streams = [cv2.cuda_Stream() for _ in range(self.num_workers)]
        
        logging.info(f"‚úÖ GPUAccelerator initialized (use_gpu={self.use_gpu}, batch_size={batch_size}, num_workers={num_workers})")
    
    def start(self):
        """Starta worker-tr√•dar f√∂r parallell bearbetning"""
        if self.running:
            return
        
        self.running = True
        
        # Starta worker-tr√•dar
        for i in range(self.num_workers):
            worker = threading.Thread(target=self._worker_loop, args=(i,))
            worker.daemon = True
            worker.start()
            self.workers.append(worker)
        
        logging.info(f"üöÄ {len(self.workers)} GPU worker-tr√•dar startade")
    
    def stop(self):
        """Stoppa worker-tr√•dar"""
        self.running = False
        
        # V√§nta p√• att alla worker-tr√•dar avslutas
        for worker in self.workers:
            if worker.is_alive():
                worker.join(timeout=1.0)
        
        self.workers = []
        logging.info("‚èπÔ∏è GPU worker-tr√•dar stoppade")
    
    def _worker_loop(self, worker_id):
        """Huvudloop f√∂r worker-tr√•dar"""
        logging.info(f"Worker {worker_id} startad")
        
        while self.running:
            try:
                # H√§mta n√§sta uppgift fr√•n k√∂n
                task_type, data, callback, args, kwargs = self.image_queue.get(timeout=0.1)
                
                # Utf√∂r uppgiften
                if task_type == 'process_image':
                    result = self._process_image_gpu(data, *args, **kwargs)
                elif task_type == 'detect_objects':
                    result = self._detect_objects_gpu(data, *args, **kwargs)
                elif task_type == 'ocr':
                    result = self._ocr_gpu(data, *args, **kwargs)
                else:
                    result = None
                
                # L√§gg till resultatet i resultatsk√∂n eller anropa callback
                if callback:
                    callback(result)
                else:
                    self.result_queue.put((task_type, result))
                
                # Markera uppgiften som klar
                self.image_queue.task_done()
                
            except Exception as e:
                logging.error(f"Fel i worker {worker_id}: {e}")
        
        logging.info(f"Worker {worker_id} avslutad")
    
    def process_image(self, image, operations=None, callback=None):
        """
        Asynkront bildbearbetning
        
        Args:
            image: PIL.Image, numpy array eller s√∂kv√§g till bildfil
            operations: Lista med bearbetningsoperationer att utf√∂ra
            callback: Funktion att anropa med resultatet
        """
        if isinstance(image, str) and os.path.exists(image):
            # Ladda bilden om det √§r en s√∂kv√§g
            image = Image.open(image)
        
        # Standardoperationer om inga anges
        if operations is None:
            operations = ['normalize', 'enhance']
        
        # L√§gg till i k√∂n f√∂r bearbetning
        self.image_queue.put(('process_image', image, callback, (operations,), {}))
        
        if callback is None:
            # Om ingen callback anges, v√§nta p√• resultatet och returnera
            while True:
                if not self.result_queue.empty():
                    task_type, result = self.result_queue.get()
                    if task_type == 'process_image':
                        return result
                time.sleep(0.01)
    
    def detect_objects(self, image, conf_threshold=0.5, nms_threshold=0.4, callback=None):
        """
        Asynkron objektdetektering i en bild
        
        Args:
            image: PIL.Image, numpy array eller s√∂kv√§g till bildfil
            conf_threshold: Konfidenstr√∂skel
            nms_threshold: Non-maximum suppression threshold
            callback: Funktion att anropa med resultatet
        """
        if isinstance(image, str) and os.path.exists(image):
            # Ladda bilden om det √§r en s√∂kv√§g
            image = Image.open(image)
        
        # L√§gg till i k√∂n f√∂r bearbetning
        self.image_queue.put(('detect_objects', image, callback, (), 
                             {'conf_threshold': conf_threshold, 'nms_threshold': nms_threshold}))
        
        if callback is None:
            # Om ingen callback anges, v√§nta p√• resultatet och returnera
            while True:
                if not self.result_queue.empty():
                    task_type, result = self.result_queue.get()
                    if task_type == 'detect_objects':
                        return result
                time.sleep(0.01)
    
    def ocr(self, image, lang='swe+eng', callback=None):
        """
        Asynkron OCR p√• en bild
        
        Args:
            image: PIL.Image, numpy array eller s√∂kv√§g till bildfil
            lang: Spr√•k f√∂r OCR
            callback: Funktion att anropa med resultatet
        """
        if isinstance(image, str) and os.path.exists(image):
            # Ladda bilden om det √§r en s√∂kv√§g
            image = Image.open(image)
        
        # L√§gg till i k√∂n f√∂r bearbetning
        self.image_queue.put(('ocr', image, callback, (), {'lang': lang}))
        
        if callback is None:
            # Om ingen callback anges, v√§nta p√• resultatet och returnera
            while True:
                if not self.result_queue.empty():
                    task_type, result = self.result_queue.get()
                    if task_type == 'ocr':
                        return result
                time.sleep(0.01)
    
    def parallel_process_images(self, images, operation='process_image', **kwargs):
        """
        Bearbeta flera bilder parallellt
        
        Args:
            images: Lista med bilder
            operation: Typ av operation att utf√∂ra
            **kwargs: Extra argument till operationen
        
        Returns:
            Lista med resultat
        """
        results = [None] * len(images)
        completed = [False] * len(images)
        
        def callback(idx, result):
            results[idx] = result
            completed[idx] = True
        
        # L√§gg till alla bilder i k√∂n
        for i, image in enumerate(images):
            if operation == 'process_image':
                self.process_image(image, callback=lambda r, idx=i: callback(idx, r), **kwargs)
            elif operation == 'detect_objects':
                self.detect_objects(image, callback=lambda r, idx=i: callback(idx, r), **kwargs)
            elif operation == 'ocr':
                self.ocr(image, callback=lambda r, idx=i: callback(idx, r), **kwargs)
        
        # V√§nta p√• att alla bilder bearbetas
        while not all(completed):
            time.sleep(0.01)
        
        return results
    
    def _process_image_gpu(self, image, operations):
        """
        Bearbeta en bild med GPU-acceleration
        
        Args:
            image: PIL.Image eller numpy array
            operations: Lista med bearbetningsoperationer att utf√∂ra
            
        Returns:
            Bearbetad bild
        """
        # Konvertera till numpy array om det √§r en PIL-bild
        if isinstance(image, Image.Image):
            img_np = np.array(image)
        else:
            img_np = image
        
        # Konvertera till BGR f√∂r OpenCV
        if len(img_np.shape) == 3 and img_np.shape[2] == 3:
            img_cv = cv2.cvtColor(img_np, cv2.COLOR_RGB2BGR)
        else:
            img_cv = img_np
        
        # Anv√§nd GPU-acceleration om tillg√§nglig
        if self.use_gpu and cv2_cuda_available:
            # Ladda upp bilden till GPU
            gpu_img = cv2.cuda_GpuMat()
            gpu_img.upload(img_cv)
            
            # Utf√∂r operationer p√• GPU
            for op in operations:
                if op == 'normalize':
                    # Normalisera bilden
                    gpu_img = cv2.cuda.normalize(gpu_img, None, 0, 255, cv2.NORM_MINMAX)
                elif op == 'enhance':
                    # F√∂rb√§ttra kontrast och sk√§rpa
                    gpu_img = cv2.cuda.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8)).apply(gpu_img)
                elif op == 'blur':
                    # Gaussisk blur
                    gpu_img = cv2.cuda.createGaussianFilter(gpu_img.type(), gpu_img.type(), (5, 5), 1.0).apply(gpu_img)
                elif op == 'edge':
                    # Kantdetektering
                    gpu_img = cv2.cuda.createCannyEdgeDetector(50, 150).detect(gpu_img)
                
            # Ladda ner resultatet fr√•n GPU
            result = gpu_img.download()
        else:
            # Fallback p√• CPU-operationer
            result = img_cv
            
            for op in operations:
                if op == 'normalize':
                    result = cv2.normalize(result, None, 0, 255, cv2.NORM_MINMAX)
                elif op == 'enhance':
                    if len(result.shape) == 3:
                        # Konvertera till gr√•skala f√∂r CLAHE
                        gray = cv2.cvtColor(result, cv2.COLOR_BGR2GRAY)
                        clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
                        gray = clahe.apply(gray)
                        # Konvertera tillbaka till f√§rg
                        result = cv2.cvtColor(gray, cv2.COLOR_GRAY2BGR)
                    else:
                        clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
                        result = clahe.apply(result)
                elif op == 'blur':
                    result = cv2.GaussianBlur(result, (5, 5), 1.0)
                elif op == 'edge':
                    if len(result.shape) == 3:
                        gray = cv2.cvtColor(result, cv2.COLOR_BGR2GRAY)
                        result = cv2.Canny(gray, 50, 150)
                    else:
                        result = cv2.Canny(result, 50, 150)
        
        # Konvertera tillbaka till PIL Image om det var det ursprungliga formatet
        if isinstance(image, Image.Image):
            if len(result.shape) == 3:
                result = cv2.cvtColor(result, cv2.COLOR_BGR2RGB)
            return Image.fromarray(result)
        
        return result
    
    def _detect_objects_gpu(self, image, conf_threshold=0.5, nms_threshold=0.4):
        """
        Detektera objekt i en bild med GPU-acceleration
        
        Denna implementation anv√§nder en f√∂renklad modell. I en faktisk implementation
        skulle detta anv√§nda en f√∂rtr√§nad YOLO/EfficientDet/SSD modell med CUDA-st√∂d.
        
        Args:
            image: PIL.Image eller numpy array
            conf_threshold: Konfidenstr√∂skel (0.0-1.0)
            nms_threshold: Non-maximum suppression threshold (0.0-1.0)
            
        Returns:
            Lista med detekterade objekt (klass, konfidenspo√§ng, bounding box)
        """
        # Konvertera till numpy array om det √§r en PIL-bild
        if isinstance(image, Image.Image):
            img_np = np.array(image)
        else:
            img_np = image
        
        # Konvertera till BGR f√∂r OpenCV
        if len(img_np.shape) == 3 and img_np.shape[2] == 3:
            img_cv = cv2.cvtColor(img_np, cv2.COLOR_RGB2BGR)
        else:
            img_cv = img_np
        
        # Enkel h√•rdkodat demo-exempel f√∂r UI-element (i en faktisk implementation 
        # skulle detta anv√§nda ett riktigt objekt-detection n√§tverk)
        dummy_detection_results = []
        
        # F√∂rs√∂k detektera knappar, textf√§lt och f√∂nsterkomponenter
        if self.use_gpu and USE_CUDA:
            # H√§r skulle en GPU-accelererad modell anv√§ndas
            # F√∂r demo, skapa n√•gra dummy-detektioner
            
            # G√∂r en gr√•skalebild
            gray = cv2.cvtColor(img_cv, cv2.COLOR_BGR2GRAY) if len(img_cv.shape) == 3 else img_cv
            
            # Hitta kanter
            edges = cv2.Canny(gray, 50, 150)
            
            # Hitta konturer
            contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            
            # Hitta rektangul√§ra omr√•den som kan vara UI-element
            for contour in contours:
                area = cv2.contourArea(contour)
                if area > 500:  # Ignorera mycket sm√• omr√•den
                    x, y, w, h = cv2.boundingRect(contour)
                    aspect_ratio = w / h
                    
                    # Klassificera element baserat p√• form och area
                    if 2.5 < aspect_ratio < 8 and area < 10000:
                        # Troligtvis en knapp
                        dummy_detection_results.append({
                            'class': 'button',
                            'confidence': np.random.uniform(0.7, 0.9),
                            'bbox': (x, y, x+w, y+h)
                        })
                    elif 1.5 < aspect_ratio < 10 and area < 20000:
                        # Troligtvis ett textf√§lt
                        dummy_detection_results.append({
                            'class': 'textfield',
                            'confidence': np.random.uniform(0.6, 0.8),
                            'bbox': (x, y, x+w, y+h)
                        })
                    elif aspect_ratio < 1.5 and area < 5000:
                        # Troligtvis en checkbox eller radiobutton
                        dummy_detection_results.append({
                            'class': 'checkbox',
                            'confidence': np.random.uniform(0.5, 0.7),
                            'bbox': (x, y, x+w, y+h)
                        })
            
            # Filtrera baserat p√• konfidenspo√§ng
            dummy_detection_results = [d for d in dummy_detection_results if d['confidence'] > conf_threshold]
        else:
            # CPU-baserad implementation, liknande men l√•ngsammare
            # G√∂r en gr√•skalebild
            gray = cv2.cvtColor(img_cv, cv2.COLOR_BGR2GRAY) if len(img_cv.shape) == 3 else img_cv
            
            # Hitta kanter
            edges = cv2.Canny(gray, 50, 150)
            
            # Hitta konturer
            contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            
            # Hitta rektangul√§ra omr√•den som kan vara UI-element
            for contour in contours:
                area = cv2.contourArea(contour)
                if area > 500:  # Ignorera mycket sm√• omr√•den
                    x, y, w, h = cv2.boundingRect(contour)
                    aspect_ratio = w / h
                    
                    # Klassificera element baserat p√• form och area
                    if 2.5 < aspect_ratio < 8 and area < 10000:
                        # Troligtvis en knapp
                        dummy_detection_results.append({
                            'class': 'button',
                            'confidence': np.random.uniform(0.7, 0.9),
                            'bbox': (x, y, x+w, y+h)
                        })
                    elif 1.5 < aspect_ratio < 10 and area < 20000:
                        # Troligtvis ett textf√§lt
                        dummy_detection_results.append({
                            'class': 'textfield',
                            'confidence': np.random.uniform(0.6, 0.8),
                            'bbox': (x, y, x+w, y+h)
                        })
                    elif aspect_ratio < 1.5 and area < 5000:
                        # Troligtvis en checkbox eller radiobutton
                        dummy_detection_results.append({
                            'class': 'checkbox',
                            'confidence': np.random.uniform(0.5, 0.7),
                            'bbox': (x, y, x+w, y+h)
                        })
            
            # Filtrera baserat p√• konfidenspo√§ng
            dummy_detection_results = [d for d in dummy_detection_results if d['confidence'] > conf_threshold]
        
        return dummy_detection_results
    
    def _ocr_gpu(self, image, lang='swe+eng'):
        """
        Utf√∂r OCR p√• en bild med GPU-acceleration (om m√∂jligt)
        
        I en faktisk implementation skulle detta anv√§nda GPU-accelererad tesseract
        eller en annan GPU-optimerad OCR-l√∂sning.
        
        Args:
            image: PIL.Image eller numpy array
            lang: Spr√•k f√∂r OCR
            
        Returns:
            Text fr√•n bilden
        """
        # Konvertera till numpy array om det √§r en PIL-bild
        if isinstance(image, Image.Image):
            img_np = np.array(image)
        else:
            img_np = image
        
        # F√∂r demo, anv√§nd standard tesseract via import
        try:
            import pytesseract
            
            # F√∂rbearbeta bilden f√∂r b√§ttre OCR-resultat
            if len(img_np.shape) == 3:
                gray = cv2.cvtColor(img_np, cv2.COLOR_RGB2GRAY)
            else:
                gray = img_np
            
            # F√∂rb√§ttra kontrast f√∂r b√§ttre OCR
            clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
            enhanced = clahe.apply(gray)
            
            # Anv√§nd tesseract f√∂r OCR
            try:
                text = pytesseract.image_to_string(enhanced, lang=lang)
                return text
            except Exception as e:
                logging.error(f"OCR error: {e}")
                return ""
        except ImportError:
            logging.error("pytesseract √§r inte installerat. Kan inte utf√∂ra OCR.")
            return "OCR √§r inte tillg√§ngligt."

# Convenience-funktioner f√∂r global anv√§ndning

_accelerator = None

def get_accelerator(use_gpu=True, batch_size=4, num_workers=2):
    """H√§mta den globala acceleratorn eller skapa en ny om den inte finns"""
    global _accelerator
    if _accelerator is None:
        _accelerator = GPUAccelerator(use_gpu=use_gpu, batch_size=batch_size, num_workers=num_workers)
        _accelerator.start()
    return _accelerator

def process_image(image, operations=None, callback=None):
    """Bearbeta en bild med GPU-acceleration"""
    return get_accelerator().process_image(image, operations, callback)

def detect_objects(image, conf_threshold=0.5, nms_threshold=0.4, callback=None):
    """Detektera objekt i en bild med GPU-acceleration"""
    return get_accelerator().detect_objects(image, conf_threshold, nms_threshold, callback)

def ocr(image, lang='swe+eng', callback=None):
    """Utf√∂r OCR p√• en bild med GPU-acceleration"""
    return get_accelerator().ocr(image, lang, callback)

def parallel_process_images(images, operation='process_image', **kwargs):
    """Bearbeta flera bilder parallellt med GPU-acceleration"""
    return get_accelerator().parallel_process_images(images, operation, **kwargs)

def shutdown():
    """St√§ng ner acceleratorn"""
    global _accelerator
    if _accelerator is not None:
        _accelerator.stop()
        _accelerator = None